use std::{
    fs,
    io::{prelude::*, BufReader},
    net::{TcpListener, TcpStream},
    thread,
    time::Duration,
};

use http_server::ThreadPool;

fn main() {
    let listener = TcpListener::bind("127.0.0.1:7878").unwrap();
    let pool = ThreadPool::new(4);

    // add .take(#) to get a certain amount before shutting down
    for stream in listener.incoming() {
        let stream = stream.unwrap();

        pool.execute(|| {
            handle_connection(stream);
        });
    }
}


fn handle_connection(mut stream: TcpStream) {
    let buf_reader = BufReader::new(&mut stream);
    let request_line = buf_reader.lines().next().unwrap().unwrap();

    let (status_line, filename) = match &request_line[..] {
        "GET / HTTP/1.1" => ("HTTP/1.1 200 OK", "index.html"),
        "GET /sleep HTTP/1.1" => {
            thread::sleep(Duration::from_secs(5));
            ("HTTP/1.1 200 OK", "index.html")
        }
        _ => ("HTTP/1.1 404 NOT FOUND", "404.html"),
    };

    let contents = fs::read_to_string(filename).unwrap();
    let length = contents.len();

    let response =
        format!("{status_line}\r\nContent-Length: {length}\r\n\r\n{contents}");

    stream.write_all(response.as_bytes()).unwrap();
    } 


/*
Code that was generated by AI

--ADD THESE FILES TO CARGO.TOML file if test
tokio = { version = "1", features = ["full"] }
hyper = "0.14"


use hyper::service::{make_service_fn, service_fn};
use hyper::{Body, Request, Response, Server};
use std::convert::Infallible;
use std::net::SocketAddr;

async fn handle_request(_req: Request<Body>) -> Result<Response<Body>, Infallible> {
    Ok(Response::new(Body::from("Hello, World!")))
}


async fn main() {
    // Define the address to bind to
    let addr = SocketAddr::from(([127, 0, 0, 1], 3000));

    // Create a `make_service_fn` to create a `Service` for each incoming connection
    let make_svc = make_service_fn(|_conn| async { 
        Ok::<_, Infallible>(service_fn(handle_request))
    });

    // Create the server
    let server = Server::bind(&addr).serve(make_svc);

    // Run the server and log any errors
    if let Err(e) = server.await {
        eprintln!("Server error: {}", e);
    }
}
    */
